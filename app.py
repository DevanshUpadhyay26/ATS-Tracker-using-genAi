from dotenv import load_dotenv
import os
import base64
import streamlit as st
import io
from PIL import Image 
import pdf2image
import google.generativeai as genai
from google.generativeai.types import RequestOptions


load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def get_gemini_response(input_text, pdf_content, prompt):
    model = genai.GenerativeModel('gemini-pro-vision')
    response = model.generate_content([input_text, pdf_content[0], prompt], request_options=RequestOptions(retry=retry.Retry(initial=10, multiplier=2, maximum=60, timeout=300)))
    return response.text

def input_pdf_setup(uploaded_file):
    if uploaded_file is not None:
        images = pdf2image.convert_from_bytes(uploaded_file.read())
        first_page = images[0]
        img_byte_arr = io.BytesIO()
        first_page.save(img_byte_arr, format='JPEG')
        img_byte_arr = img_byte_arr.getvalue()
        pdf_parts = [{"mime_type": "image/jpeg", "data": base64.b64encode(img_byte_arr).decode()}]
        return pdf_parts
    else:
        raise FileNotFoundError("No file uploaded")

st.set_page_config(page_title="üí£ATS Expert")
st.title("ATS Tracking System Using Generative AI")
st.header("Disclaimer  ( Õ°¬∞ Õú ñ Õ°¬∞)	")
st.info("The following content has been automatically generated by an AI system and should be used for informational purposes only. We cannot guarantee the accuracy, completeness, or timeliness of the information provided. Any actions taken based on this content are at your own risk. We recommend seeking qualified expertise or conducting further research to validate and supplement the information provided. üòÖ")

input_text = st.text_area("Job Description: ", key="input")
uploaded_file = st.file_uploader("Upload your resume (PDF)...", type=["pdf"])

if uploaded_file is not None:
    st.write("PDF Uploaded Successfully")

submit1 = st.button("Tell Me About the Resume")
submit2 = st.button("Keypoints in the Resume")
submit3 = st.button("Match with JD")
submit5 = st.button("Percentage match")

input_prompt1 = """
 As a Technical Human Resource Manager with extensive experience, evaluate the provided resume against the job description.
 Please provide a detailed analysis of how well the candidate's profile aligns with the role. 
 Highlight the strengths and areas for improvement based on the job requirements.
"""
input_prompt2 = """
 You are an experienced Technical Human Resource Manager tasked with extracting key details from the resume:
- Identify the candidate's Name.
- List the top 5 Technical Skills and top 5 Soft Skills.
- Describe their work Experience.
- Provide details of their Projects, including project titles and descriptions.
Only include information explicitly stated in the resume.
"""
input_prompt3 = """
 Given a resume and a job description, create a comparative analysis table:
- Illustrate the match between the resume and job description using indicators for high, medium, and low alignment.
- Highlight strengths and areas needing improvement.
"""
input_prompt5 = """
As an ATS expert well-versed in data science, evaluate the resume against the job description:
- Provide the percentage match indicating how closely the resume matches the job description.
- Identify 5 keywords or skills missing from the resume that are crucial for the job.
"""

if submit1:
    if uploaded_file is not None:
        pdf_content = input_pdf_setup(uploaded_file)
        response = get_gemini_response(input_text, pdf_content, input_prompt1)
        st.subheader("The Response is")
        st.write(response)
        st.text("PS: Re-Click the buttons for more desired content (‚óï‚Äø‚óï‚úø)")
    else:
        st.write("Please upload the resume")

elif submit2:
    if uploaded_file is not None:
        pdf_content = input_pdf_setup(uploaded_file)
        response = get_gemini_response(input_text, pdf_content, input_prompt2)
        st.subheader("The Response is")
        st.write(response)
    else:
        st.write("Please upload the resume")

elif submit3:
    if uploaded_file is not None:
        pdf_content = input_pdf_setup(uploaded_file)
        response = get_gemini_response(input_text, pdf_content, input_prompt3)
        st.subheader("The Response is")
        st.write(response)
    else:
        st.write("Please upload the resume")

elif submit5:
    if uploaded_file is not None:
        pdf_content = input_pdf_setup(uploaded_file)
        response = get_gemini_response(input_text, pdf_content, input_prompt5)
        st.subheader("The Response is")
        st.write(response)
    else:
        st.write("Please upload the resume")

st.markdown("***")
st.text("Made With ‚ù§Ô∏è by Devansh Upadhyay")
st.link_button("View My Portfolio", "https://www.devy.tech/")
